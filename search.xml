<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[终极lnmp环境搭建]]></title>
    <url>%2F2019%2F07%2F28%2Fthe-ultimate-lnmp-environment-to-build%2F</url>
    <content type="text"><![CDATA[初始化系统设置软件源 aliyun , remi, mysql #设置aliyun库 $ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo # 设置 remi 库, 设置 mysql 库 $ yum install http://rpms.famillecollet.com/enterprise/remi-release-7.rpm # 由于mysql 版权方面的限制, centos 7 没有内置mysql 服务器, 必须从mysql 官方进行安装 $ yum install http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 复制代码 设置 nginx 源 源地址: nginx: Linux packages创建 vi /etc/yum.repos.d/nginx.repo , 并且填充以下内容来安装 yum repository 库 [nginx] name=nginx repo baseurl=http://nginx.org/packages/centos/7/$basearch/ gpgcheck=0 enabled=1更新元数据# 更新元数据 $ yum makecache安装软件常用软件和nmp 软件# 更新系统 $ yum update # 安装常用软件 $ yum install vim git supervisor redis # 安装 php 基于 remi , 所以需要安装 remi 源 # 如果需要安装其他版本, 则需要将 repo=remi-php7x $ yum install --enablerepo=remi-php72 php php-pdo php-fpm php-mbstring php-mcrypt php-gd php-mysqli php-zip php-xml php-devel # 安装 nginx $ yum install nginx --enablerepo=nginx # 安装 mysql server $ yum install mysql-server启动服务#启动服务 $ systemctl start php-fpm mysqld nginx supervisord开机自启动# 开机启动 $ systemctl enable php-fpm mysqld nginx supervisord初始化数据库启动mysql并且获取密码$ systemctl start mysqld # mysql 5.7 在安装完成的时候会生成一个临时密码, 我们需要找到错误日志 `/var/log/mysqld.log`来获取这个临时密码 # use below command to see the password: $ grep 'temporary password' /var/log/mysqld.log [Note] A temporary password is generated for root@localhost: _ab3BAKulW?r初始化 mysql$ mysql_secure_installation Securing the MySQL server deployment. Enter password for user root: ****** New password: ****** Re-enter new password: ****** The 'validate_password' plugin is installed on the server. The subsequent steps will run with the existing configuration of the plugin. Using existing password for root. Estimated strength of the password: 100 Change the password for root ? ((Press y|Y for Yes, any other key for No) : * Estimated strength of the password: 100 Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? (Press y|Y for Yes, any other key for No) : Y Success. Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? (Press y|Y for Yes, any other key for No) : N ... skipping. By default, MySQL comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? (Press y|Y for Yes, any other key for No) : N ... skipping. Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y Success. All done! 设置密码的方法$ mysql -uroot -p****** mysql> set password for 'root'@'localhost' = password('markzhao123456'); mysql> exit软件配置配置nginx配置 nginx 时候的运行组$vim /etc/nginx/nginx.conf user nginx nginx;配置nginx虚拟主机$cd /etc/nginx/conf.d $vi laravel.conf server{ listen 80; # 如果这里是 IP, 则才会允许访问, 否则, 扯破牛蛋也访问不到 server_name kk01.laravel.test; index index.php index.html index.htm default.html default.htm default.php; root /var/www/laravel/public; # 这里注意和服务器自带不同的是 # fastcgi_param SCRIPT_FILENAME /scripts/$fastcgi_script_name; # fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # 会导致 FastCGI sent in stderr: "Primary script unknown" while reading response header from upstream location ~ \.php$ { fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } location / { try_files $uri $uri/ /index.php?$query_string; } location ~ .*\.(js|css)?$ { expires 12h; } access_log /var/log/nginx/laravel_access.log; error_log /var/log/nginx/laravel_error.log; } # 重启nginx systemctl restart nginx配置php配置 php-fpm$vim /etc/php-fpm.d/www.conf user = nginx group = nginx配置 php.ini$vi /etc/php.ini # 时区 date.timezone = Asia/Shanghai配置 session 是可写状态$ chown -R nginx:nginx /var/lib/php/session/配置系统允许访问# 打开防火墙 $ systemctl start firewalld # 配置 http $ firewall-cmd --permanent --zone=public --add-service=http # 配置 3306 $ firewall-cmd --permanent --zone=public --add-port=3306/tcp # 重启 防火墙 $ firewall-cmd --reload配置数据库用户CREATE USER 'remote'@'%' IDENTIFIED WITH mysql_native_password AS 'U*OSy)iKk$XO9dMB'; GRANT ALL PRIVILEGES ON *.* TO 'remote'@'%' REQUIRE NONE WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0; GRANT ALL PRIVILEGES ON `1dailian\_v2`.* TO 'remote'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES项目配置composer配置#下载composer.phar文件 curl -sS https://getcomposer.org/installer | php #将composer.phar移动到环境变量中并且更名为composer mv composer.phar /usr/local/bin/composer #使用国内镜像 composer config -g repo.packagist composer https://packagist.phpcomposer.com安装laravel$ cd /var/www $ composer create-project laravel/laravel laravel --prefer-dist "5.7.*"修改本地hosts文件IP kk01.laravel.test修改SELINUX(阿里云服务器跳过)vim /etc/selinux/config # 找到： SELINUX=enforcing # 改成 SELINUX=enabled # 重启虚拟机 reboot修改文件权限#改变目录下的所有文件到新的属主或属组 chown -R nginx:nginx storage/ bootstrap/cache/ #阿里云服务器跳过 chmod -R 775 storage/ bootstrap/cache/高并发配置参数系统层面调整同时打开文件数量ulimit -n 20480TCP最大连接数（somaxconn）echo 10000 > /proc/sys/net/core/somaxconnTCP连接立即回收、回用（recycle、reuse）echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse echo 1 > /proc/sys/net/ipv4/tcp_tw_recycle不做TCP洪水抵御echo 0 > /proc/sys/net/ipv4/tcp_syncookies #也可以直接使用优化后的配置，在/etc/sysctl.conf中加入： net.core.somaxconn = 20480 net.core.rmem_default = 262144 net.core.wmem_default = 262144 net.core.rmem_max = 16777216 net.core.wmem_max = 16777216 net.ipv4.tcp_rmem = 4096 4096 16777216 net.ipv4.tcp_wmem = 4096 4096 16777216 net.ipv4.tcp_mem = 786432 2097152 3145728 net.ipv4.tcp_max_syn_backlog = 16384 net.core.netdev_max_backlog = 20000 net.ipv4.tcp_fin_timeout = 15 net.ipv4.tcp_max_syn_backlog = 16384 net.ipv4.tcp_tw_reuse = 1 net.ipv4.tcp_tw_recycle = 1 net.ipv4.tcp_max_orphans = 131072 net.ipv4.tcp_syncookies = 0 使用：sysctl -p 生效 sysctl -pnginx层面#修改nginx配置文件，nginx.conf #增加work_rlimit_nofile和worker_connections数量，并禁用keepalive_timeout。 worker_processes 1; #nginx 进程数，建议按照cpu 数目来指定，一般为它的倍数 worker_rlimit_nofile 20000; #一个nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx 进程数相除，但是nginx 分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致 events { use epoll;#使用epoll的I/O模型 worker_connections 20000;#每个进程允许的最多连接数， 理论上每台nginx 服务器的最大连接数为worker_processes*worker_connections multi_accept on; } http { keepalive_timeout 0; } #重启 systemctl restart nginx测试并发#配置cpu核数 worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000; worker_rlimit_nofile 1000000; events { use epoll; worker_connections 1000000; multi_accept on; }多台机器配置负载均衡hosts文件只配置代理服务器，上游服务器不用配置安装http_load自行google 测试 ab -c 100 -n 10000 http://127.0.0.1/ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>lnmp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后端必知之php基础知识笔记]]></title>
    <url>%2F2019%2F07%2F25%2Fphp-notes%2F</url>
    <content type="text"><![CDATA[1.变量是存储信息的容器，$x=5;2.PHP 在名为 $GLOBALSindex 的数组中存储了所有的全局变量。下标存有变量名3.字符串是字符序列，数组在一个变量中存储多个值，null是数据类型null唯一可能的值， 字符串4.strrev() 函数 反转字符串： 5.strpos() 函数用于检索字符串内指定的字符或文本。如果找到匹配，则会返回首个匹配的字符位置。如果未找到匹配，则将返回 FALSE。 str_replace() 函数用一些字符串替换字符串中的另一些字符。_ 7.设置常量，请使用 define() 函数8.在编写代码时，经常需要反复运行同一代码块。我们可以使用循环来执行这样的任务9.foreach 循环只适用于数组，并用于遍历数组中的每个键/值对。数组10.数组是特殊的变量，它可以同时保存一个以上的值。11.在 PHP 中，有三种数组类型：• 索引数组 - 带有数字索引的数组• 关联数组 - 带有指定键的数组• 多维数组 - 包含一个或多个数组的数组 数组排序类型： 对数组进行升序排序 - sort() 对数组进行降序排序 - rsort() 根据值对数组进行升序排序 - asort() 根据键对数组进行升序排序 - ksort() 根据值对数组进行降序排序 - arsort() 根据键对数组进行降序排序 - krsort() 13.超全局变量 PHP 在名为 $GLOBALSindex 的数组中存储了所有全局变量。变量的名字就是数组的键。 $_SERVER 这种超全局变量保存关于报头、路径和脚本位置的信息。 PHP $_REQUEST 用于收集 HTML 表单提交的数据。 PHP $_POST 广泛用于收集提交 method=”post” 的 HTML 表单后的表单数据。$_POST 也常用于传递变量。 PHP $GET 也可用于收集提交 HTML 表单 (method=”get”) 之后的表单数据。 $_FILES ， $_ENV，$_COOKIE ， $_SESSION 14.PHP Date() 函数把时间戳格式化为更易读的日期和时间。 require 会生成致命错误并停止脚本 include 会生成警告，并且脚本会继续如果您希望继续执行，并向用户输出结果，即使包含文件已丢失，那么请使用 include。否则，在框架、CMS 或者复杂的 PHP 应用程序编程中，请始终使用 require 向执行流引用关键文件。这有助于提高应用程序的安全性和完整性，在某个关键文件意外丢失的情况下。 文件相关16.readfile() 函数读取文件，并把它写入输出缓冲。17.打开文件的更好的方法是通过 fopen() 函数。fopen() 的第一个参数包含被打开的文件名，第二个参数规定打开文件的模式。18.PHP 读取文件 - fread() fread() 函数读取打开的文件。fread() 的第一个参数包含待读取文件的文件名，第二个参数规定待读取的最大字节数。19.PHP 关闭文件 - fclose() fclose() 函数用于关闭打开的文件。20.fgets() 函数用于从文件读取单行。21.PHP 检查 End-Of-File - feof() feof() 函数检查是否已到达 “end-of-file” (EOF)。 feof() 对于遍历未知长度的数据很有用。 "; } fclose($myfile); ?>22.fgetc() 函数用于从文件中读取单个字符。 23.fopen() 函数也用于创建文件。24.fwrite() 函数用于写入文件。fwrite() 的第一个参数包含要写入的文件的文件名，第二个参数是被写的字符串。25.通过使用 PHP 的全局数组 $_FILES，你可以从客户计算机向远程服务器上传文件。• $_FILES“file”“name” - 被上传文件的名称• $_FILES“file”“type” - 被上传文件的类型• $_FILES“file”“size” - 被上传文件的大小，以字节计• $_FILES“file”“tmp_name”] - 存储在服务器的文件的临时副本的名称• $_FILES“file”“error” - 由文件上传导致的错误代码 cookie26什么是 Cookie？cookie 常用于识别用户。cookie 是服务器留在用户计算机中的小文件。每当相同的计算机通过浏览器请求页面时，它同时会发送 cookie。 setcookie() 函数用于设置 cookie。PHP 的 $_COOKIE 变量用于取回 cookie 的值。当删除 cookie 时，您应当使过期日期变更为过去的时间点。删除的例子： session27PHP session 变量用于存储有关用户会话的信息，或更改用户会话的设置。Session 变量保存的信息是单一用户的，并且可供应用程序中的所有页面使用。Session 的工作机制是：为每个访问者创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，亦或通过 URL 进行传导。在您把用户信息存储到 PHP session 中之前，首先必须启动会话。session_start() 函数 _存储和取回 session 变量的正确方法是使用 PHP $SESSION 变量：如果您希望删除某些 session 数据，可以使用 unset() 或 session_destroy() 函数。_ 28.token能够防止CSRF(跨站请求伪造) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[团结就是力量]]></title>
    <url>%2F2019%2F07%2F23%2Funion-is-strength%2F</url>
    <content type="text"><![CDATA[沪漂工作生活，最苦的是没有陪伴，举目无亲。我还好一些，家人亲戚朋友都在这边，有聚会 ，有相互帮助。再来谈做事，做事需要有力量，无力的做事，质量低效率低效果不好。团结就是力量，有朋友的聚会，分享技术分享生活，有家人亲戚的陪伴，心中暖暖，铿锵有力。做一个给别人带来力量 的人，离家谋生，都属不易，且行切记。做一个暖男 ，温暖身边的人。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[7-22-面试题准备]]></title>
    <url>%2F2019%2F07%2F22%2F7-22-interview-preparation%2F</url>
    <content type="text"><![CDATA[@: 面试题准备整个简历看上去有点虚，浅薄，技术上需要时间和项目的深刻磨砺 MySQL 优化：1.数据库引擎的选择（myisam ,innodb），字段类型的合理选择 2.用 explain 分析 SQL 语句，并优化SQL 语句 ​ 2.1当只要一行数据时使用LIMIT 1可以增加性能，这样， MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查找下一条符合记录的数据。 ​ 2.2只去自己需要的column，避免使用SELECT *，从数据库里读出越多的数据，那么查询就会变得越慢。 ​ 2.3 MySQL参数优化 ,设置最大连接数,set globle max_connections = 5000; ​ long_query_time = 2 超过两秒的查询记录下来，设置慢查询 ​ log_slow_queries = /data/mysql/slowlog.log ​ query_cache_size = 64M 2.4修改mysql的慢查询 set long_query_time 2.5 使用查询缓存优化查询 3.对经常查询的字段 加索引，联合索引，分库分表 4.架构方面：主从复制，读写分离，负载均衡 5.硬件优化，cpu，内存，硬盘等硬件的优化 索引主键 普通索引， 全文索引，主要是针对对文件，文本的检索, 比如文章 唯一索引， 索引的数据结构Hash索引，BTree索引 索引的代价: 占用磁盘空间 对dml操作(数据操作语言，它是对表记录的操作(增、删、改)有影响，变慢 在哪些列上适合添加索引？a.肯定在where条件经常使用 b.该字段的内容不是唯一的几个值（sex） c.字段内容不是频繁变化 索引在什么情况下会失效 如果mysql认为全表扫面要比使用索引快，则不使用索引。 如：表里只有一条数据。2,对于使用 like 查询， 查询如果是 ‘%aaa’ 不会使用索引，而 ‘aaa%’ 会使用到索引。 如果条件中有or，索引失效 PHP 异常处理手动捕获异常方式是使用try-catch手动抛出异常 throw new exception() 异常错误 三个黑武器 set_error_handler 设置用户自定义错误处理函数 set_exception_handler 设置用户自定义的异常处理函数 register_shutdown_function 注册一个在关机时执行的函数 Laravel 框架底层（略）需要理解依赖注入 服务器部署centos + PHP + NGINX+MySQL+Redis centos+ (php+nginx)docker + mysql docker + redis docker 网站安全SQL注入解决办法1.用PDO连接数据库， pdo 2.使用mysqli 连接数据库 3.使用 mysql_real_escape_string函数 4.使用 addslashes函数 5.使用MySQL bind_param()绑定参数 XSS攻击防范1.在php.ini中，session.cookie_httponly = ture 来开启全局的Cookie的HttpOnly属性 1.htmlspecialchars函数 2.htmlentities函数 4.RemoveXss函数 clean_xss函数 SSL 或token基于token的身份验证1.前端将账号和密码传给后端2.后端将账号和密码加密生成token传给前端3.前端将token存入缓存，每次请求的时候，将token传入url或header里4.后端验证前端传的token 与数据库账号密码生成的token作比较，相等则身份验证OK 加密方式1.MD5加密 2.sha1加密 3.base64加密 4.openssl_encrypt 加密 网络7层模型 原理应用层表示层会话层传输层网络层数据链路层物理层 OOP思想OOP思想中很重要的有五点，类，对象，还有面向对象的三大特征：继承，多态和封装。类是对现实事物的抽象表示，包括事物的属性状态信息和行为信息。对象是抽象事物的具体表示，使其具有自身的特点。继承：让子类拥有父类所有的属性和方法封装：将对象信息状态通过访问权限修饰符隐藏在对象内部，不允许外部程序直接访问多态：接口实现，继承父类方法重写，同一个类中进行重载 微信对接流程nginx性能、安全性方面常用的debug方法1、 echo，Var_dump，print_r，打断点，查看输出 打断点，设置log日志输出 缓存RedisRedis 是一个开源的，基于内存的结构化数据存储媒介，可以作为数据库，缓存服务或消息服务使用。Redis支持多种数据结构，包括字符串（string）,哈希表(hash)，列表（list）,集合（set），有序集合（zset）； 分布式缓存为什么要使用分布式缓存1、本地缓存的问题本地缓存速度一开始高于分布式缓存，但是随着其缓存数量的增加，所占内存越来越大，系统运行内存越来越小，最后系统会被拖慢（这一点与第二点联系起来）本地缓存存于本机，其缓存数量与大小受本机内存大小限制本地缓存存于本机，其他机器的访问不到这样的缓存 高并发环境下，例如典型的淘宝双11秒杀，几分钟内上亿的用户涌入淘宝，这个时候如果访问不加拦截，让大量的读写请求涌向数据库，由于磁盘的处理速度与内存显然不在一个量级，服务器马上就要宕机。从减轻数据库的压力和提高系统响应速度两个角度来考虑，都会在数据库之前加一层缓存，访问压力越大的，在缓存之前就开始CDN拦截图片等访问请求。并且由于最早的单台机器的内存资源以及承载能力有限，如果大量使用本地缓存，也会使相同的数据被不同的节点存储多份，对内存资源造成较大的浪费，因此，才催生出了分布式缓存。假若业务场景需要用到持久化缓存功能、或者支持多种数据结构的缓存功能，那么Redis则是最佳选择。为了让缓存系统能够支持更多的业务场景，选择Redis会更优。 负载均衡日志处理，监控告警日志的记录，能帮助debug定位问题所在 购物车购物车操作就是session的原理操作添加一个物品进去是一个数组，存ID，name, num那么两个物品就是二维数组，操作二维数组即可购物车原理 秒杀系统秒杀主要解决两个问题1.高并发对数据库的压力问题2.商品如何正确减少的问题第一个问题，用户Redis缓存处理抢购，避免直接操作数据库第二个可以将字段设置为unsigned，当库存为0时，就会返回false 二是使用mysql的事务，锁住操作的行 三五年职业规划深耕后端技术，深耕基础知识，成为高级工程师乃至资深工程师级别的人物 Linux 命令linux 如何显示一个文件的某几行(中间几行)【一】从第3000行开始，显示1000行。即显示3000 3999行cat filename | tail -n +3000 | head -n 1000【二】显示1000行到3000行cat filename| head -n 3000 | tail -n +1000或cat filename | tail -n +1000 | head -n 2000 【三】用sed命令 sed -n ‘5,10p’ filename 这样你就可以只查看文件的第5行到第10行。 反向代理NGINX 与 Apache 的区别，优缺点js的跨域问题获取文件扩展名$info = pathinfo($file);return $info‘extension’; #### document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[go-命令]]></title>
    <url>%2F2019%2F07%2F20%2Fgo-command%2F</url>
    <content type="text"><![CDATA[document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写博客的重要性]]></title>
    <url>%2F2019%2F07%2F17%2Fthe-importance-of-blog%2F</url>
    <content type="text"><![CDATA[在学习过程中，被动接受知识对自己的提高是轻微的。比如看网课学习，在听老师讲解的时候感觉简单易懂，代码逻辑清晰，当自己敲代码的时候，却无从下手，这也是属于眼高手低的范畴。当自己主动学习，主动思考其效率和对个人的提升无疑是高于被动接受的。然而使你提高最大的是主动说出自己的认识，把自己的知识和理解传达给别人，这种方式是对自己的提升无疑是最显著的。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo 命令]]></title>
    <url>%2F2019%2F07%2F16%2Fhexo-help%2F</url>
    <content type="text"><![CDATA[clean Remove generated files and cache.hexo clean 移除生成的文件和缓存config Get or set configurations.hexo config 获取或设置配置deploy Deploy your website.hexo d 部署您的网站。 generate Generate static files.hexo g 生成生成静态文件。help Get help on a command.init Create a new Hexo folder.list List the information of the site migrate Migrate your site from other system to Hexo.new Create a new post.hexo new filename 创建新的文章publish Moves a draft post from _drafts to _posts folder.render Render files with renderer plugins.使用渲染器插件渲染文件。server Start the server.version Display version information. you can check the docs: https://hexo.io/zh-cn/docs/ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[hello myblog]]></title>
    <url>%2F2019%2F07%2F16%2Fhello%2F</url>
    <content type="text"><![CDATA[hello myblog document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
</search>
