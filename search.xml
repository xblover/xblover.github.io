<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[7-22-面试题准备]]></title>
    <url>%2F2019%2F07%2F22%2F7-22-interview-preparation%2F</url>
    <content type="text"><![CDATA[@: 面试题准备整个简历看上去有点虚，浅薄，技术上需要时间和项目的深刻磨砺 MySQL 优化：1.数据库引擎的选择（myisam ,innodb），字段类型的合理选择 2.用 explain 分析 SQL 语句，并优化SQL 语句 ​ 2.1当只要一行数据时使用LIMIT 1可以增加性能，这样， MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查找下一条符合记录的数据。 ​ 2.2只去自己需要的column，避免使用SELECT *，从数据库里读出越多的数据，那么查询就会变得越慢。 ​ 2.3 MySQL参数优化 ,设置最大连接数,set globle max_connections = 5000; ​ long_query_time = 2 超过两秒的查询记录下来，设置慢查询 ​ log_slow_queries = /data/mysql/slowlog.log ​ query_cache_size = 64M 2.4修改mysql的慢查询 set long_query_time 2.5 使用查询缓存优化查询 3.对经常查询的字段 加索引，联合索引，分库分表 4.架构方面：主从复制，读写分离，负载均衡 5.硬件优化，cpu，内存，硬盘等硬件的优化 索引主键 普通索引， 全文索引，主要是针对对文件，文本的检索, 比如文章 唯一索引， 索引的数据结构Hash索引，BTree索引 索引的代价: 占用磁盘空间 对dml操作(数据操作语言，它是对表记录的操作(增、删、改)有影响，变慢 在哪些列上适合添加索引？a.肯定在where条件经常使用 b.该字段的内容不是唯一的几个值（sex） c.字段内容不是频繁变化 索引在什么情况下会失效 如果mysql认为全表扫面要比使用索引快，则不使用索引。 如：表里只有一条数据。2,对于使用 like 查询， 查询如果是 ‘%aaa’ 不会使用索引，而 ‘aaa%’ 会使用到索引。 如果条件中有or，索引失效 PHP 异常处理手动捕获异常方式是使用try-catch手动抛出异常 throw new exception() 异常错误 三个黑武器 set_error_handler 设置用户自定义错误处理函数 set_exception_handler 设置用户自定义的异常处理函数 register_shutdown_function 注册一个在关机时执行的函数 Laravel 框架底层（略）需要理解依赖注入 服务器部署centos + PHP + NGINX+MySQL+Redis centos+ (php+nginx)docker + mysql docker + redis docker 网站安全SQL注入解决办法1.用PDO连接数据库， pdo 2.使用mysqli 连接数据库 3.使用 mysql_real_escape_string函数 4.使用 addslashes函数 5.使用MySQL bind_param()绑定参数 XSS攻击防范1.在php.ini中，session.cookie_httponly = ture 来开启全局的Cookie的HttpOnly属性 1.htmlspecialchars函数 2.htmlentities函数 4.RemoveXss函数 clean_xss函数 SSL 或token基于token的身份验证1.前端将账号和密码传给后端2.后端将账号和密码加密生成token传给前端3.前端将token存入缓存，每次请求的时候，将token传入url或header里4.后端验证前端传的token 与数据库账号密码生成的token作比较，相等则身份验证OK 加密方式1.MD5加密 2.sha1加密 3.base64加密 4.openssl_encrypt 加密 网络7层模型 原理应用层表示层会话层传输层网络层数据链路层物理层 OOP思想OOP思想中很重要的有五点，类，对象，还有面向对象的三大特征：继承，多态和封装。类是对现实事物的抽象表示，包括事物的属性状态信息和行为信息。对象是抽象事物的具体表示，使其具有自身的特点。继承：让子类拥有父类所有的属性和方法封装：将对象信息状态通过访问权限修饰符隐藏在对象内部，不允许外部程序直接访问多态：接口实现，继承父类方法重写，同一个类中进行重载 微信对接流程nginx性能、安全性方面常用的debug方法1、 echo，Var_dump，print_r，打断点，查看输出 打断点，设置log日志输出 缓存Redis分布式缓存为什么要使用分布式缓存1、本地缓存的问题本地缓存速度一开始高于分布式缓存，但是随着其缓存数量的增加，所占内存越来越大，系统运行内存越来越小，最后系统会被拖慢（这一点与第二点联系起来）本地缓存存于本机，其缓存数量与大小受本机内存大小限制本地缓存存于本机，其他机器的访问不到这样的缓存 高并发环境下，例如典型的淘宝双11秒杀，几分钟内上亿的用户涌入淘宝，这个时候如果访问不加拦截，让大量的读写请求涌向数据库，由于磁盘的处理速度与内存显然不在一个量级，服务器马上就要宕机。从减轻数据库的压力和提高系统响应速度两个角度来考虑，都会在数据库之前加一层缓存，访问压力越大的，在缓存之前就开始CDN拦截图片等访问请求。并且由于最早的单台机器的内存资源以及承载能力有限，如果大量使用本地缓存，也会使相同的数据被不同的节点存储多份，对内存资源造成较大的浪费，因此，才催生出了分布式缓存。假若业务场景需要用到持久化缓存功能、或者支持多种数据结构的缓存功能，那么Redis则是最佳选择。为了让缓存系统能够支持更多的业务场景，选择Redis会更优。 负载均衡nginx支持的负载均衡调度算法，实现负载均衡 日志处理，监控告警日志的记录，能帮助debug定位问题所在 购物车购物车操作就是session的原理操作添加一个物品进去是一个数组，存ID，name, num那么两个物品就是二维数组，操作二维数组即可购物车原理 秒杀系统秒杀主要解决两个问题1.高并发对数据库的压力问题2.商品如何正确减少的问题第一个问题，用户Redis缓存处理抢购，避免直接操作数据库第二个可以将字段设置为unsigned，当库存为0时，就会返回false 二是使用mysql的事务，锁住操作的行 三五年职业规划深耕后端技术，深耕基础知识，成为高级工程师乃至资深工程师级别的人物 Linux 命令linux 如何显示一个文件的某几行(中间几行)【一】从第3000行开始，显示1000行。即显示3000 3999行cat filename | tail -n +3000 | head -n 1000【二】显示1000行到3000行cat filename| head -n 3000 | tail -n +1000或cat filename | tail -n +1000 | head -n 2000 【三】用sed命令 sed -n ‘5,10p’ filename 这样你就可以只查看文件的第5行到第10行。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[go-命令]]></title>
    <url>%2F2019%2F07%2F20%2Fgo-command%2F</url>
    <content type="text"><![CDATA[document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写博客的重要性]]></title>
    <url>%2F2019%2F07%2F17%2Fthe-importance-of-blog%2F</url>
    <content type="text"><![CDATA[在学习过程中，被动接受知识对自己的提高是轻微的。比如看网课学习，在听老师讲解的时候感觉简单易懂，代码逻辑清晰，当自己敲代码的时候，却无从下手，这也是属于眼高手低的范畴。当自己主动学习，主动思考其效率和对个人的提升无疑是高于被动接受的。然而使你提高最大的是主动说出自己的认识，把自己的知识和理解传达给别人，这种方式是对自己的提升无疑是最显著的。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo 命令]]></title>
    <url>%2F2019%2F07%2F16%2Fhexo-help%2F</url>
    <content type="text"><![CDATA[clean Remove generated files and cache.hexo clean 移除生成的文件和缓存config Get or set configurations.hexo config 获取或设置配置deploy Deploy your website.hexo d 部署您的网站。 generate Generate static files.hexo g 生成生成静态文件。help Get help on a command.init Create a new Hexo folder.list List the information of the site migrate Migrate your site from other system to Hexo.new Create a new post.hexo new filename 创建新的文章publish Moves a draft post from _drafts to _posts folder.render Render files with renderer plugins.使用渲染器插件渲染文件。server Start the server.version Display version information. you can check the docs: https://hexo.io/zh-cn/docs/ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[hello myblog]]></title>
    <url>%2F2019%2F07%2F16%2Fhello%2F</url>
    <content type="text"><![CDATA[hello myblog document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
</search>
