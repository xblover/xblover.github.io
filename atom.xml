<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xubo的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xblover.github.io/"/>
  <updated>2019-07-28T09:00:01.612Z</updated>
  <id>http://xblover.github.io/</id>
  
  <author>
    <name>xubo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>终极lnmp环境搭建</title>
    <link href="http://xblover.github.io/2019/07/28/the-ultimate-lnmp-environment-to-build/"/>
    <id>http://xblover.github.io/2019/07/28/the-ultimate-lnmp-environment-to-build/</id>
    <published>2019-07-28T08:40:36.000Z</published>
    <updated>2019-07-28T09:00:01.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化系统"><a href="#初始化系统" class="headerlink" title="初始化系统"></a>初始化系统</h2><h3 id="设置软件源"><a href="#设置软件源" class="headerlink" title="设置软件源"></a>设置软件源</h3><ul><li>aliyun , remi, mysql</li></ul><pre><code>#设置aliyun库$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo# 设置 remi 库, 设置 mysql 库$ yum install http://rpms.famillecollet.com/enterprise/remi-release-7.rpm# 由于mysql 版权方面的限制, centos 7 没有内置mysql 服务器, 必须从mysql 官方进行安装$ yum install http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm复制代码</code></pre><ul><li>设置 nginx 源</li></ul><p>源地址: nginx: Linux packages<br>创建 vi /etc/yum.repos.d/nginx.repo , 并且填充以下内容来安装 yum repository 库</p><pre><code>[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/7/$basearch/gpgcheck=0enabled=1</code></pre><h3 id="更新元数据"><a href="#更新元数据" class="headerlink" title="更新元数据"></a>更新元数据</h3><pre><code># 更新元数据$ yum makecache</code></pre><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><h3 id="常用软件和nmp-软件"><a href="#常用软件和nmp-软件" class="headerlink" title="常用软件和nmp 软件"></a>常用软件和nmp 软件</h3><pre><code># 更新系统$ yum update# 安装常用软件$ yum install vim git supervisor redis# 安装 php 基于 remi , 所以需要安装 remi 源# 如果需要安装其他版本, 则需要将 repo=remi-php7x $ yum install --enablerepo=remi-php72 php php-pdo php-fpm php-mbstring php-mcrypt php-gd php-mysqli php-zip php-xml php-devel# 安装 nginx$ yum install nginx --enablerepo=nginx# 安装 mysql server$ yum install mysql-server</code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><pre><code>#启动服务$ systemctl start php-fpm mysqld nginx supervisord</code></pre><h3 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h3><pre><code># 开机启动$ systemctl enable php-fpm mysqld nginx supervisord</code></pre><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><h4 id="启动mysql并且获取密码"><a href="#启动mysql并且获取密码" class="headerlink" title="启动mysql并且获取密码"></a>启动mysql并且获取密码</h4><pre><code>$ systemctl start mysqld# mysql 5.7 在安装完成的时候会生成一个临时密码, 我们需要找到错误日志 `/var/log/mysqld.log`来获取这个临时密码# use below command to see the password:$ grep 'temporary password' /var/log/mysqld.log [Note] A temporary password is generated for root@localhost: _ab3BAKulW?r</code></pre><h3 id="初始化-mysql"><a href="#初始化-mysql" class="headerlink" title="初始化 mysql"></a>初始化 mysql</h3><pre><code>$ mysql_secure_installationSecuring the MySQL server deployment.Enter password for user root: ******New password: ******Re-enter new password: ******The 'validate_password' plugin is installed on the server.The subsequent steps will run with the existing configurationof the plugin.Using existing password for root.Estimated strength of the password: 100 Change the password for root ? ((Press y|Y for Yes, any other key for No) : *Estimated strength of the password: 100 Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : yBy default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created for them. This is intended only fortesting, and to make the installation go a bit smoother.You should remove them before moving into a productionenvironment.Remove anonymous users? (Press y|Y for Yes, any other key for No) :  YSuccess.Normally, root should only be allowed to connect from'localhost'. This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? (Press y|Y for Yes, any other key for No) : N... skipping.By default, MySQL comes with a database named 'test' thatanyone can access. This is also intended only for testing,and should be removed before moving into a productionenvironment.Remove test database and access to it? (Press y|Y for Yes, any other key for No) : N ... skipping.Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? (Press y|Y for Yes, any other key for No) : YSuccess.All done! </code></pre><h3 id="设置密码的方法"><a href="#设置密码的方法" class="headerlink" title="设置密码的方法"></a>设置密码的方法</h3><pre><code>$ mysql -uroot -p******mysql> set password for 'root'@'localhost' = password('markzhao123456');mysql> exit</code></pre><h2 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h2><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><h4 id="配置-nginx-时候的运行组"><a href="#配置-nginx-时候的运行组" class="headerlink" title="配置 nginx 时候的运行组"></a>配置 nginx 时候的运行组</h4><pre><code>$vim /etc/nginx/nginx.confuser nginx nginx;</code></pre><h3 id="配置nginx虚拟主机"><a href="#配置nginx虚拟主机" class="headerlink" title="配置nginx虚拟主机"></a>配置nginx虚拟主机</h3><pre><code>$cd /etc/nginx/conf.d$vi laravel.confserver{    listen 80;    # 如果这里是 IP, 则才会允许访问, 否则, 扯破牛蛋也访问不到    server_name kk01.laravel.test;    index index.php index.html index.htm default.html default.htm default.php;    root /var/www/laravel/public;    # 这里注意和服务器自带不同的是    # fastcgi_param  SCRIPT_FILENAME  /scripts/$fastcgi_script_name;    # fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;    # 会导致 FastCGI sent in stderr: "Primary script unknown" while reading response header from upstream    location ~ \.php$ {        fastcgi_pass   127.0.0.1:9000;        fastcgi_index  index.php;        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;        include        fastcgi_params;    }    location / {        try_files $uri $uri/ /index.php?$query_string;    }    location ~ .*\.(js|css)?$ {        expires 12h;    }    access_log /var/log/nginx/laravel_access.log;    error_log /var/log/nginx/laravel_error.log;}# 重启nginxsystemctl restart nginx</code></pre><h3 id="配置php"><a href="#配置php" class="headerlink" title="配置php"></a>配置php</h3><h4 id="配置-php-fpm"><a href="#配置-php-fpm" class="headerlink" title="配置 php-fpm"></a>配置 php-fpm</h4><pre><code>$vim /etc/php-fpm.d/www.confuser = nginxgroup = nginx</code></pre><h3 id="配置-php-ini"><a href="#配置-php-ini" class="headerlink" title="配置 php.ini"></a>配置 php.ini</h3><pre><code>$vi /etc/php.ini# 时区date.timezone = Asia/Shanghai</code></pre><h3 id="配置-session-是可写状态"><a href="#配置-session-是可写状态" class="headerlink" title="配置 session 是可写状态"></a>配置 session 是可写状态</h3><pre><code>$ chown -R nginx:nginx /var/lib/php/session/</code></pre><h3 id="配置系统允许访问"><a href="#配置系统允许访问" class="headerlink" title="配置系统允许访问"></a>配置系统允许访问</h3><pre><code># 打开防火墙$ systemctl start firewalld# 配置 http$ firewall-cmd --permanent --zone=public --add-service=http# 配置 3306$ firewall-cmd --permanent --zone=public --add-port=3306/tcp# 重启 防火墙$ firewall-cmd --reload</code></pre><h3 id="配置数据库用户"><a href="#配置数据库用户" class="headerlink" title="配置数据库用户"></a>配置数据库用户</h3><pre><code>CREATE USER 'remote'@'%' IDENTIFIED WITH mysql_native_password AS 'U*OSy)iKk$XO9dMB';GRANT ALL PRIVILEGES ON *.* TO 'remote'@'%' REQUIRE NONE WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;GRANT ALL PRIVILEGES ON `1dailian\_v2`.* TO 'remote'@'%' WITH GRANT OPTION;FLUSH PRIVILEGES</code></pre><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h3 id="composer配置"><a href="#composer配置" class="headerlink" title="composer配置"></a>composer配置</h3><pre><code>#下载composer.phar文件curl -sS https://getcomposer.org/installer | php#将composer.phar移动到环境变量中并且更名为composermv composer.phar  /usr/local/bin/composer#使用国内镜像composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></pre><h3 id="安装laravel"><a href="#安装laravel" class="headerlink" title="安装laravel"></a>安装laravel</h3><pre><code>$ cd /var/www$ composer create-project laravel/laravel laravel --prefer-dist "5.7.*"</code></pre><h3 id="修改本地hosts文件"><a href="#修改本地hosts文件" class="headerlink" title="修改本地hosts文件"></a>修改本地hosts文件</h3><pre><code>IP      kk01.laravel.test</code></pre><h3 id="修改SELINUX-阿里云服务器跳过"><a href="#修改SELINUX-阿里云服务器跳过" class="headerlink" title="修改SELINUX(阿里云服务器跳过)"></a>修改SELINUX(阿里云服务器跳过)</h3><pre><code>vim /etc/selinux/config# 找到：SELINUX=enforcing# 改成SELINUX=enabled# 重启虚拟机reboot</code></pre><h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3><pre><code>#改变目录下的所有文件到新的属主或属组chown -R nginx:nginx storage/ bootstrap/cache/#阿里云服务器跳过chmod -R 775 storage/ bootstrap/cache/</code></pre><h2 id="高并发配置参数"><a href="#高并发配置参数" class="headerlink" title="高并发配置参数"></a>高并发配置参数</h2><h3 id="系统层面"><a href="#系统层面" class="headerlink" title="系统层面"></a>系统层面</h3><h5 id="调整同时打开文件数量"><a href="#调整同时打开文件数量" class="headerlink" title="调整同时打开文件数量"></a>调整同时打开文件数量</h5><pre><code>ulimit -n 20480</code></pre><h5 id="TCP最大连接数（somaxconn）"><a href="#TCP最大连接数（somaxconn）" class="headerlink" title="TCP最大连接数（somaxconn）"></a>TCP最大连接数（somaxconn）</h5><pre><code>echo 10000 > /proc/sys/net/core/somaxconn</code></pre><h5 id="TCP连接立即回收、回用（recycle、reuse）"><a href="#TCP连接立即回收、回用（recycle、reuse）" class="headerlink" title="TCP连接立即回收、回用（recycle、reuse）"></a>TCP连接立即回收、回用（recycle、reuse）</h5><pre><code>echo 1 > /proc/sys/net/ipv4/tcp_tw_reuseecho 1 > /proc/sys/net/ipv4/tcp_tw_recycle</code></pre><h5 id="不做TCP洪水抵御"><a href="#不做TCP洪水抵御" class="headerlink" title="不做TCP洪水抵御"></a>不做TCP洪水抵御</h5><pre><code>echo 0 > /proc/sys/net/ipv4/tcp_syncookies#也可以直接使用优化后的配置，在/etc/sysctl.conf中加入：net.core.somaxconn = 20480net.core.rmem_default = 262144net.core.wmem_default = 262144net.core.rmem_max = 16777216net.core.wmem_max = 16777216net.ipv4.tcp_rmem = 4096 4096 16777216net.ipv4.tcp_wmem = 4096 4096 16777216net.ipv4.tcp_mem = 786432 2097152 3145728net.ipv4.tcp_max_syn_backlog = 16384net.core.netdev_max_backlog = 20000net.ipv4.tcp_fin_timeout = 15net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_tw_recycle = 1net.ipv4.tcp_max_orphans = 131072net.ipv4.tcp_syncookies = 0使用：sysctl -p 生效sysctl -p</code></pre><h3 id="nginx层面"><a href="#nginx层面" class="headerlink" title="nginx层面"></a>nginx层面</h3><pre><code>#修改nginx配置文件，nginx.conf#增加work_rlimit_nofile和worker_connections数量，并禁用keepalive_timeout。worker_processes  1; #nginx 进程数，建议按照cpu 数目来指定，一般为它的倍数worker_rlimit_nofile 20000; #一个nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx 进程数相除，但是nginx 分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致events {use epoll;#使用epoll的I/O模型worker_connections 20000;#每个进程允许的最多连接数， 理论上每台nginx 服务器的最大连接数为worker_processes*worker_connectionsmulti_accept on;}http {keepalive_timeout 0;}#重启systemctl restart nginx</code></pre><h3 id="测试并发"><a href="#测试并发" class="headerlink" title="测试并发"></a>测试并发</h3><pre><code>#配置cpu核数worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;worker_rlimit_nofile 1000000;events {    use epoll;    worker_connections  1000000;    multi_accept on;}</code></pre><h1 id="多台机器配置负载均衡"><a href="#多台机器配置负载均衡" class="headerlink" title="多台机器配置负载均衡"></a>多台机器配置负载均衡</h1><h1 id="hosts文件只配置代理服务器，上游服务器不用配置"><a href="#hosts文件只配置代理服务器，上游服务器不用配置" class="headerlink" title="hosts文件只配置代理服务器，上游服务器不用配置"></a>hosts文件只配置代理服务器，上游服务器不用配置</h1><h1 id="安装http-load"><a href="#安装http-load" class="headerlink" title="安装http_load"></a>安装http_load</h1><p>自行google</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p> ab -c 100 -n 10000 <a href="http://127.0.0.1/" target="_blank" rel="noopener">http://127.0.0.1/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初始化系统&quot;&gt;&lt;a href=&quot;#初始化系统&quot; class=&quot;headerlink&quot; title=&quot;初始化系统&quot;&gt;&lt;/a&gt;初始化系统&lt;/h2&gt;&lt;h3 id=&quot;设置软件源&quot;&gt;&lt;a href=&quot;#设置软件源&quot; class=&quot;headerlink&quot; title=&quot;设置软
      
    
    </summary>
    
    
      <category term="lnmp" scheme="http://xblover.github.io/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>后端必知之php基础知识笔记</title>
    <link href="http://xblover.github.io/2019/07/25/php-notes/"/>
    <id>http://xblover.github.io/2019/07/25/php-notes/</id>
    <published>2019-07-25T09:38:12.000Z</published>
    <updated>2019-07-28T07:49:04.002Z</updated>
    
    <content type="html"><![CDATA[<p>1.变量是存储信息的容器，$x=5;<br>2.PHP 在名为 $GLOBALS<a href>index</a> 的数组中存储了所有的全局变量。下标存有变量名<br>3.字符串是字符序列，数组在一个变量中存储多个值，null是数据类型null唯一可能的值，</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>4.strrev() 函数 反转字符串：<br>     <!--?php    echo strrev("Hello world!"); // 输出 !dlrow olleH    ?--><br>5.strpos() 函数用于检索字符串内指定的字符或文本。<br>如果找到匹配，则会返回首个匹配的字符位置。如果未找到匹配，则将返回 FALSE。<br>    <!--?php    echo strpos("Hello world!","world");  // 输出为 6    ?--></p><ol start="6"><li>str_replace() 函数用一些字符串替换字符串中的另一些字符。_<!--?phpecho str_replace("world", "Kitty", "Hello world!"); // 输出 Hello Kitty!?-->7.设置常量，请使用 define() 函数<br>8.在编写代码时，经常需要反复运行同一代码块。我们可以使用循环来执行这样的任务<br>9.foreach 循环只适用于数组，并用于遍历数组中的每个键/值对。<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3>10.数组是特殊的变量，它可以同时保存一个以上的值。<br>11.在 PHP 中，有三种数组类型：<br>•    索引数组 - 带有数字索引的数组<br>•    关联数组 - 带有指定键的数组<br>•    多维数组 - 包含一个或多个数组的数组<ol start="12"><li>数组排序类型：</li></ol><ul><li>对数组进行升序排序 - sort()</li><li>对数组进行降序排序 - rsort()</li><li>根据值对数组进行升序排序 - asort()</li><li>根据键对数组进行升序排序 - ksort()</li><li>根据值对数组进行降序排序 - arsort()</li><li>根据键对数组进行降序排序 - krsort()</li></ul>13.超全局变量<ul><li>PHP 在名为 $GLOBALS<a href>index</a> 的数组中存储了所有全局变量。变量的名字就是数组的键。</li><li>$_SERVER 这种超全局变量保存关于报头、路径和脚本位置的信息。</li><li>PHP $_REQUEST 用于收集 HTML 表单提交的数据。</li><li>PHP $_POST 广泛用于收集提交 method=”post” 的 HTML 表单后的表单数据。$_POST 也常用于传递变量。</li><li>PHP $<em>GET 也可用于收集提交 HTML 表单 (method=”get”) 之后的表单数据。</em></li><li>$_FILES ， $_ENV，$_COOKIE ， $_SESSION</li></ul></li></ol><p>14.PHP Date() 函数把时间戳格式化为更易读的日期和时间。</p><ol start="15"><li>require 会生成致命错误并停止脚本<br>  include 会生成警告，并且脚本会继续<br>如果您希望继续执行，并向用户输出结果，即使包含文件已丢失，那么请使用 include。否则，在框架、CMS 或者复杂的 PHP 应用程序编程中，请始终使用 require 向执行流引用关键文件。这有助于提高应用程序的安全性和完整性，在某个关键文件意外丢失的情况下。</li></ol><h3 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h3><p>16.readfile() 函数读取文件，并把它写入输出缓冲。<br>17.打开文件的更好的方法是通过 fopen() 函数。fopen() 的第一个参数包含被打开的文件名，第二个参数规定打开文件的模式。<br>18.PHP 读取文件 - fread()     fread() 函数读取打开的文件。<br>fread() 的第一个参数包含待读取文件的文件名，第二个参数规定待读取的最大字节数。<br>19.PHP 关闭文件 - fclose()     fclose() 函数用于关闭打开的文件。<br>20.fgets() 函数用于从文件读取单行。<br>21.PHP 检查 End-Of-File - feof()   feof() 函数检查是否已到达 “end-of-file” (EOF)。 feof() 对于遍历未知长度的数据很有用。<br>    <!--?php    $myfile = fopen("webdictionary.txt", "r") or die("Unable to open file!");    // 输出单行直到 end-of-file    while(!feof($myfile)) {      echo fgets($myfile) . "<br-->";    }    fclose($myfile);    ?><br>22.fgetc() 函数用于从文件中读取单个字符。<br>    <!--?php    $myfile = fopen("webdictionary.txt", "r") or die("Unable to open file!");    // 输出单字符直到 end-of-file    while(!feof($myfile)) {      echo fgetc($myfile);    }    fclose($myfile);    ?--><br>23.fopen() 函数也用于创建文件。<br>24.fwrite() 函数用于写入文件。fwrite() 的第一个参数包含要写入的文件的文件名，第二个参数是被写的字符串。<br>25.通过使用 PHP 的全局数组 $_FILES，你可以从客户计算机向远程服务器上传文件。<br>•    $_FILES<a href>“file”</a><a href>“name”</a> - 被上传文件的名称<br>•    $_FILES<a href>“file”</a><a href>“type”</a> - 被上传文件的类型<br>•    $_FILES<a href>“file”</a><a href>“size”</a> - 被上传文件的大小，以字节计<br>•    $_FILES<a href>“file”</a><a href>“tmp</a>_name”] - 存储在服务器的文件的临时副本的名称<br>•    $_FILES<a href>“file”</a><a href>“error”</a> - 由文件上传导致的错误代码</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>26什么是 Cookie？<br>cookie 常用于识别用户。cookie 是服务器留在用户计算机中的小文件。每当相同的计算机通过浏览器请求页面时，它同时会发送 cookie。</p><p>setcookie() 函数用于设置 cookie。PHP 的 $_COOKIE 变量用于取回 cookie 的值。当删除 cookie 时，您应当使过期日期变更为过去的时间点。<br>删除的例子：<br>    <!--?php     // set the expiration date to one hour ago    setcookie("user", "", time()-3600);    ?--></p><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>27PHP session 变量用于存储有关用户会话的信息，或更改用户会话的设置。Session 变量保存的信息是单一用户的，并且可供应用程序中的所有页面使用。<br>Session 的工作机制是：为每个访问者创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，亦或通过 URL 进行传导。<br>在您把用户信息存储到 PHP session 中之前，首先必须启动会话。session_start() 函数     _<br>存储和取回 session 变量的正确方法是使用 PHP $<em>SESSION 变量：</em><br>如果您希望删除某些 session 数据，可以使用 unset() 或 session_destroy() 函数。_</p><p>28.token能够防止CSRF(跨站请求伪造)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.变量是存储信息的容器，$x=5;&lt;br&gt;2.PHP 在名为 $GLOBALS&lt;a href&gt;index&lt;/a&gt; 的数组中存储了所有的全局变量。下标存有变量名&lt;br&gt;3.字符串是字符序列，数组在一个变量中存储多个值，null是数据类型null唯一可能的值，&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://xblover.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>团结就是力量</title>
    <link href="http://xblover.github.io/2019/07/23/union-is-strength/"/>
    <id>http://xblover.github.io/2019/07/23/union-is-strength/</id>
    <published>2019-07-23T13:46:41.000Z</published>
    <updated>2019-07-23T13:55:47.003Z</updated>
    
    <content type="html"><![CDATA[<p>沪漂工作生活，最苦的是没有陪伴，举目无亲。我还好一些，家人亲戚朋友都在这边，有聚会 ，有相互帮助。<br>再来谈做事，做事需要有力量，无力的做事，质量低效率低效果不好。团结就是力量，有朋友的聚会，分享技术分享生活，有家人亲戚的陪伴，心中暖暖，铿锵有力。做一个给别人带来力量 的人，离家谋生，都属不易，且行切记。做一个暖男 ，温暖身边的人。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;沪漂工作生活，最苦的是没有陪伴，举目无亲。我还好一些，家人亲戚朋友都在这边，有聚会 ，有相互帮助。&lt;br&gt;再来谈做事，做事需要有力量，无力的做事，质量低效率低效果不好。团结就是力量，有朋友的聚会，分享技术分享生活，有家人亲戚的陪伴，心中暖暖，铿锵有力。做一个给别人带来力量 
      
    
    </summary>
    
    
      <category term="生活" scheme="http://xblover.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>7-22-面试题准备</title>
    <link href="http://xblover.github.io/2019/07/22/7-22-interview-preparation/"/>
    <id>http://xblover.github.io/2019/07/22/7-22-interview-preparation/</id>
    <published>2019-07-22T03:53:11.000Z</published>
    <updated>2019-08-11T10:42:55.184Z</updated>
    
    <content type="html"><![CDATA[<p>@: 面试题准备<br>整个简历看上去有点虚，浅薄，技术上需要时间和项目的深刻磨砺</p><h3 id="MySQL-优化："><a href="#MySQL-优化：" class="headerlink" title="MySQL 优化："></a>MySQL 优化：</h3><p>1.数据库引擎的选择（myisam ,innodb），字段类型的合理选择</p><p>2.用 explain 分析 SQL 语句，并优化SQL 语句</p><p>​    2.1当只要一行数据时使用LIMIT 1可以增加性能，这样， MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查找下一条符合记录的数据。</p><p>​    2.2只去自己需要的column，避免使用SELECT *，从数据库里读出越多的数据，那么查询就会变得越慢。</p><p>​    2.3 MySQL参数优化 ,设置最大连接数,set globle max_connections =    5000;</p><p>​     long_query_time = 2 超过两秒的查询记录下来，设置慢查询</p><p>​     log_slow_queries = /data/mysql/slowlog.log</p><p>​     query_cache_size = 64M</p><p>   2.4修改mysql的慢查询 set long_query_time  </p><p>   2.5 使用查询缓存优化查询</p><p>3.对经常查询的字段 加索引，联合索引，分库分表</p><p>4.架构方面：主从复制，读写分离，负载均衡</p><p>5.硬件优化，cpu，内存，硬盘等硬件的优化</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>主键</p><p>普通索引，</p><p>全文索引，主要是针对对文件，文本的检索, 比如文章</p><p>唯一索引，</p><h5 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h5><p>Hash索引，BTree索引</p><h5 id="索引的代价"><a href="#索引的代价" class="headerlink" title="索引的代价:"></a>索引的代价:</h5><ol><li>占用磁盘空间</li><li>对dml操作(数据操作语言，它是对表记录的操作(增、删、改)有影响，变慢</li></ol><h5 id="在哪些列上适合添加索引？"><a href="#在哪些列上适合添加索引？" class="headerlink" title="在哪些列上适合添加索引？"></a>在哪些列上适合添加索引？</h5><p>a.肯定在where条件经常使用</p><p>b.该字段的内容不是唯一的几个值（sex）</p><p>c.字段内容不是频繁变化</p><h6 id="索引在什么情况下会失效"><a href="#索引在什么情况下会失效" class="headerlink" title="索引在什么情况下会失效"></a>索引在什么情况下会失效</h6><ol><li>如果mysql认为全表扫面要比使用索引快，则不使用索引。 如：表里只有一条数据。<br>2,对于使用 like 查询， 查询如果是 ‘%aaa’ 不会使用索引，而 ‘aaa%’ 会使用到索引。 </li><li>如果条件中有or，索引失效</li></ol><h3 id="PHP-异常处理"><a href="#PHP-异常处理" class="headerlink" title="PHP 异常处理"></a>PHP 异常处理</h3><p>手动捕获异常方式是使用try-catch<br>手动抛出异常    throw  new exception()</p><p>异常<br>错误</p><p>三个黑武器</p><p>set_error_handler 设置用户自定义错误处理函数</p><p>set_exception_handler 设置用户自定义的异常处理函数</p><p>register_shutdown_function 注册一个在关机时执行的函数</p><h3 id="Laravel-框架底层（略）"><a href="#Laravel-框架底层（略）" class="headerlink" title="Laravel 框架底层（略）"></a>Laravel 框架底层（略）</h3><p>需要理解依赖注入</p><h3 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h3><p>centos + PHP + NGINX+MySQL+Redis</p><p>centos+ (php+nginx)docker + mysql docker + redis docker </p><h2 id="网站安全"><a href="#网站安全" class="headerlink" title="网站安全"></a>网站安全</h2><h3 id="SQL注入解决办法"><a href="#SQL注入解决办法" class="headerlink" title="SQL注入解决办法"></a>SQL注入解决办法</h3><p>1.用PDO连接数据库，  <a href="https://www.jb51.net/article/36044.htm" target="_blank" rel="noopener">pdo</a> </p><p>2.使用mysqli 连接数据库</p><p>3.使用 mysql_real_escape_string函数</p><p>4.使用 addslashes函数</p><p>5.使用MySQL  bind_param()绑定参数</p><h3 id="XSS攻击防范"><a href="#XSS攻击防范" class="headerlink" title="XSS攻击防范"></a>XSS攻击防范</h3><p>1.在php.ini中，session.cookie_httponly = ture 来开启全局的Cookie的HttpOnly属性</p><p>1.htmlspecialchars函数</p><p>2.htmlentities函数</p><p>4.RemoveXss函数</p><p>clean_xss函数</p><h3 id="SSL-或token"><a href="#SSL-或token" class="headerlink" title="SSL 或token"></a>SSL 或token</h3><p>基于token的身份验证<br>1.前端将账号和密码传给后端<br>2.后端将账号和密码加密生成token传给前端<br>3.前端将token存入缓存，每次请求的时候，将token传入url或header里<br>4.后端验证前端传的token 与数据库账号密码生成的token作比较，相等则身份验证OK</p><h3 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h3><p>1.MD5加密</p><p>2.sha1加密</p><p>3.base64加密</p><p>4.openssl_encrypt 加密</p><h3 id="网络7层模型-原理"><a href="#网络7层模型-原理" class="headerlink" title="网络7层模型 原理"></a>网络7层模型 原理</h3><p>应用层<br>表示层<br>会话层<br>传输层<br>网络层<br>数据链路层<br>物理层<br><img src="https://images2015.cnblogs.com/blog/705728/201604/705728-20160424234824085-667046040.png" alt="image-1"></p><h3 id="OOP思想"><a href="#OOP思想" class="headerlink" title="OOP思想"></a>OOP思想</h3><p>OOP思想中很重要的有五点，类，对象，还有面向对象的三大特征：继承，多态和封装。<br>类是对现实事物的抽象表示，包括事物的属性状态信息和行为信息。<br>对象是抽象事物的具体表示，使其具有自身的特点。<br>继承：让子类拥有父类所有的属性和方法<br>封装：将对象信息状态通过访问权限修饰符隐藏在对象内部，不允许外部程序直接访问<br>多态：接口实现，继承父类方法重写，同一个类中进行重载</p><h3 id="微信对接流程"><a href="#微信对接流程" class="headerlink" title="微信对接流程"></a>微信对接流程</h3><h3 id="nginx性能、安全性方面"><a href="#nginx性能、安全性方面" class="headerlink" title="nginx性能、安全性方面"></a>nginx性能、安全性方面</h3><h3 id="常用的debug方法"><a href="#常用的debug方法" class="headerlink" title="常用的debug方法"></a>常用的debug方法</h3><p>1、 echo，Var_dump，print_r，打断点，查看输出</p><ol start="2"><li>打断点，设置log日志输出</li></ol><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>Redis 是一个开源的，基于内存的结构化数据存储媒介，可以作为数据库，缓存服务或消息服务使用。<br>Redis支持多种数据结构，包括字符串（string）,哈希表(hash)，列表（list）,集合（set），有序集合（zset）；</p><h3 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h3><h4 id="为什么要使用分布式缓存"><a href="#为什么要使用分布式缓存" class="headerlink" title="为什么要使用分布式缓存"></a>为什么要使用分布式缓存</h4><p>1、本地缓存的问题<br>本地缓存速度一开始高于分布式缓存，但是随着其缓存数量的增加，所占内存越来越大，系统运行内存越来越小，最后系统会被拖慢（这一点与第二点联系起来）<br>本地缓存存于本机，其缓存数量与大小受本机内存大小限制<br>本地缓存存于本机，其他机器的访问不到这样的缓存</p><p>高并发环境下，例如典型的淘宝双11秒杀，几分钟内上亿的用户涌入淘宝，这个时候如果访问不加拦截，让大量的读写请求涌向数据库，由于磁盘的处理速度与内存显然不在一个量级，服务器马上就要宕机。从减轻数据库的压力和提高系统响应速度两个角度来考虑，都会在数据库之前加一层缓存，访问压力越大的，在缓存之前就开始CDN拦截图片等访问请求。<br>并且由于最早的单台机器的内存资源以及承载能力有限，如果大量使用本地缓存，也会使相同的数据被不同的节点存储多份，对内存资源造成较大的浪费，因此，才催生出了分布式缓存。<br>假若业务场景需要用到持久化缓存功能、或者支持多种数据结构的缓存功能，那么Redis则是最佳选择。为了让缓存系统能够支持更多的业务场景，选择Redis会更优。</p><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><h3 id="日志处理，监控告警"><a href="#日志处理，监控告警" class="headerlink" title="日志处理，监控告警"></a>日志处理，监控告警</h3><p>日志的记录，能帮助debug定位问题所在</p><h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><p>购物车操作就是session的原理操作<br>添加一个物品进去是一个数组，存ID，name, num<br>那么两个物品就是二维数组，操作二维数组即可<br><a href="https://mp.weixin.qq.com/s/VyO1U4R24_8rJ5cHpSOwbw" target="_blank" rel="noopener">购物车原理</a></p><h3 id="秒杀系统"><a href="#秒杀系统" class="headerlink" title="秒杀系统"></a>秒杀系统</h3><p>秒杀主要解决两个问题<br>1.高并发对数据库的压力问题2.商品如何正确减少的问题<br>第一个问题，用户Redis缓存处理抢购，避免直接操作数据库<br>第二个可以将字段设置为unsigned，当库存为0时，就会返回false<br> 二是使用mysql的事务，锁住操作的行</p><h3 id="三五年职业规划"><a href="#三五年职业规划" class="headerlink" title="三五年职业规划"></a>三五年职业规划</h3><p>深耕后端技术，深耕基础知识，成为高级工程师乃至资深工程师级别的人物</p><h3 id="Linux-命令"><a href="#Linux-命令" class="headerlink" title="Linux 命令"></a>Linux 命令</h3><p>linux 如何显示一个文件的某几行(中间几行)<br>【一】从第3000行开始，显示1000行。即显示3000  3999行<br>cat filename | tail -n +3000 | head -n 1000<br>【二】显示1000行到3000行<br>cat filename| head -n 3000 | tail -n +1000<br>或<br>cat filename | tail -n +1000 | head -n 2000</p><p>【三】用sed命令<br> sed -n ‘5,10p’ filename 这样你就可以只查看文件的第5行到第10行。</p><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><h4 id="NGINX-与-Apache-的区别，优缺点"><a href="#NGINX-与-Apache-的区别，优缺点" class="headerlink" title="NGINX 与 Apache 的区别，优缺点"></a>NGINX 与 Apache 的区别，优缺点</h4><h4 id="js的跨域问题"><a href="#js的跨域问题" class="headerlink" title="js的跨域问题"></a>js的跨域问题</h4><h4 id="获取文件扩展名"><a href="#获取文件扩展名" class="headerlink" title="获取文件扩展名"></a>获取文件扩展名</h4><p>$info = pathinfo($file);<br>return $info<a href>‘extension’</a>;<br><img src="https://img2018.cnblogs.com/blog/1488893/201809/1488893-20180930180949638-1557226643.png" alt="image-2"></p><p>#### </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@: 面试题准备&lt;br&gt;整个简历看上去有点虚，浅薄，技术上需要时间和项目的深刻磨砺&lt;/p&gt;
&lt;h3 id=&quot;MySQL-优化：&quot;&gt;&lt;a href=&quot;#MySQL-优化：&quot; class=&quot;headerlink&quot; title=&quot;MySQL 优化：&quot;&gt;&lt;/a&gt;MySQL 优化：&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>go-命令</title>
    <link href="http://xblover.github.io/2019/07/20/go-command/"/>
    <id>http://xblover.github.io/2019/07/20/go-command/</id>
    <published>2019-07-20T15:55:35.000Z</published>
    <updated>2019-07-20T15:56:03.505Z</updated>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
        
      
    
    </summary>
    
    
      <category term="go" scheme="http://xblover.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>写博客的重要性</title>
    <link href="http://xblover.github.io/2019/07/17/the-importance-of-blog/"/>
    <id>http://xblover.github.io/2019/07/17/the-importance-of-blog/</id>
    <published>2019-07-17T00:47:49.000Z</published>
    <updated>2019-07-17T02:22:04.005Z</updated>
    
    <content type="html"><![CDATA[<p>在学习过程中，被动接受知识对自己的提高是轻微的。比如看网课学习，在听老师讲解的时候感觉简单易懂，代码逻辑清晰，当自己敲代码的时候，却无从下手，这也是属于眼高手低的范畴。<br>当自己主动学习，主动思考其效率和对个人的提升无疑是高于被动接受的。然而使你提高最大的是主动说出自己的认识，把自己的知识和理解传达给别人，这种方式是对自己的提升无疑是最显著的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习过程中，被动接受知识对自己的提高是轻微的。比如看网课学习，在听老师讲解的时候感觉简单易懂，代码逻辑清晰，当自己敲代码的时候，却无从下手，这也是属于眼高手低的范畴。&lt;br&gt;当自己主动学习，主动思考其效率和对个人的提升无疑是高于被动接受的。然而使你提高最大的是主动说出自己
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo 命令</title>
    <link href="http://xblover.github.io/2019/07/16/hexo-help/"/>
    <id>http://xblover.github.io/2019/07/16/hexo-help/</id>
    <published>2019-07-16T14:37:20.000Z</published>
    <updated>2019-07-16T15:28:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>clean</strong>      Remove generated files and cache.<br>hexo  clean     移除生成的文件和缓存<br><strong>config</strong>    Get or set configurations.<br>hexo config      获取或设置配置<br><strong>deploy</strong>    Deploy your website.<br>hexo d                      部署您的网站。<br> <strong>generate</strong>   Generate static files.<br>hexo g                     生成生成静态文件。<br><strong>help</strong>     Get help on a command.<br><strong>init</strong>     Create a new Hexo folder.<br><strong>list</strong>      List the information of the site  migrate   Migrate your site from other system to Hexo.<br><strong>new</strong>      Create a new post.<br>hexo new filename        创建新的文章<br><strong>publish</strong>   Moves a draft post from _drafts to _posts folder.<br><strong>render</strong>   Render files with renderer plugins.<br>使用渲染器插件渲染文件。<br><strong>server</strong>    Start the server.<br><strong>version</strong>   Display version information.</p><p>you can check the docs: <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;clean&lt;/strong&gt;      Remove generated files and cache.&lt;br&gt;hexo  clean     移除生成的文件和缓存&lt;br&gt;&lt;strong&gt;config&lt;/strong&gt;    Get or set conf
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hello myblog</title>
    <link href="http://xblover.github.io/2019/07/16/hello/"/>
    <id>http://xblover.github.io/2019/07/16/hello/</id>
    <published>2019-07-16T14:03:17.000Z</published>
    <updated>2019-08-11T10:47:57.468Z</updated>
    
    <content type="html"><![CDATA[<p>hello myblog</p><p><img src="https://xblover.github.io/2019/07/16/hello/281408194971071086.jpg" alt="image-1"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hello myblog&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://xblover.github.io/2019/07/16/hello/281408194971071086.jpg&quot; alt=&quot;image-1&quot;&gt;&lt;/p&gt;
&lt;script&gt;
        docu
      
    
    </summary>
    
    
  </entry>
  
</feed>
