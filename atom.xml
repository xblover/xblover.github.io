<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xubo的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-22T03:57:01.005Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xubo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>7-22-面试题准备</title>
    <link href="http://yoursite.com/2019/07/22/7-22-interview-preparation/"/>
    <id>http://yoursite.com/2019/07/22/7-22-interview-preparation/</id>
    <published>2019-07-22T03:53:11.000Z</published>
    <updated>2019-07-22T03:57:01.005Z</updated>
    
    <content type="html"><![CDATA[<p>@: 面试题准备<br>整个简历看上去有点虚，浅薄，技术上需要时间和项目的深刻磨砺</p><h3 id="MySQL-优化："><a href="#MySQL-优化：" class="headerlink" title="MySQL 优化："></a>MySQL 优化：</h3><p>1.数据库引擎的选择（myisam ,innodb），字段类型的合理选择</p><p>2.用 explain 分析 SQL 语句，并优化SQL 语句</p><p>​    2.1当只要一行数据时使用LIMIT 1可以增加性能，这样， MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查找下一条符合记录的数据。</p><p>​    2.2只去自己需要的column，避免使用SELECT *，从数据库里读出越多的数据，那么查询就会变得越慢。</p><p>​    2.3 MySQL参数优化 ,设置最大连接数,set globle max_connections =    5000;</p><p>​     long_query_time = 2 超过两秒的查询记录下来，设置慢查询</p><p>​     log_slow_queries = /data/mysql/slowlog.log</p><p>​     query_cache_size = 64M</p><p>   2.4修改mysql的慢查询 set long_query_time  </p><p>   2.5 使用查询缓存优化查询</p><p>3.对经常查询的字段 加索引，联合索引，分库分表</p><p>4.架构方面：主从复制，读写分离，负载均衡</p><p>5.硬件优化，cpu，内存，硬盘等硬件的优化</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>主键</p><p>普通索引，</p><p>全文索引，主要是针对对文件，文本的检索, 比如文章</p><p>唯一索引，</p><h5 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h5><p>Hash索引，BTree索引</p><h5 id="索引的代价"><a href="#索引的代价" class="headerlink" title="索引的代价:"></a>索引的代价:</h5><ol><li>占用磁盘空间</li><li>对dml操作(数据操作语言，它是对表记录的操作(增、删、改)有影响，变慢</li></ol><h5 id="在哪些列上适合添加索引？"><a href="#在哪些列上适合添加索引？" class="headerlink" title="在哪些列上适合添加索引？"></a>在哪些列上适合添加索引？</h5><p>a.肯定在where条件经常使用</p><p>b.该字段的内容不是唯一的几个值（sex）</p><p>c.字段内容不是频繁变化</p><h6 id="索引在什么情况下会失效"><a href="#索引在什么情况下会失效" class="headerlink" title="索引在什么情况下会失效"></a>索引在什么情况下会失效</h6><ol><li>如果mysql认为全表扫面要比使用索引快，则不使用索引。 如：表里只有一条数据。<br>2,对于使用 like 查询， 查询如果是 ‘%aaa’ 不会使用索引，而 ‘aaa%’ 会使用到索引。 </li><li>如果条件中有or，索引失效</li></ol><h3 id="PHP-异常处理"><a href="#PHP-异常处理" class="headerlink" title="PHP 异常处理"></a>PHP 异常处理</h3><p>手动捕获异常方式是使用try-catch<br>手动抛出异常    throw  new exception()</p><p>异常<br>错误</p><p>三个黑武器</p><p>set_error_handler 设置用户自定义错误处理函数</p><p>set_exception_handler 设置用户自定义的异常处理函数</p><p>register_shutdown_function 注册一个在关机时执行的函数</p><h3 id="Laravel-框架底层（略）"><a href="#Laravel-框架底层（略）" class="headerlink" title="Laravel 框架底层（略）"></a>Laravel 框架底层（略）</h3><p>需要理解依赖注入</p><h3 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h3><p>centos + PHP + NGINX+MySQL+Redis</p><p>centos+ (php+nginx)docker + mysql docker + redis docker </p><h2 id="网站安全"><a href="#网站安全" class="headerlink" title="网站安全"></a>网站安全</h2><h3 id="SQL注入解决办法"><a href="#SQL注入解决办法" class="headerlink" title="SQL注入解决办法"></a>SQL注入解决办法</h3><p>1.用PDO连接数据库，  <a href="https://www.jb51.net/article/36044.htm" target="_blank" rel="noopener">pdo</a> </p><p>2.使用mysqli 连接数据库</p><p>3.使用 mysql_real_escape_string函数</p><p>4.使用 addslashes函数</p><p>5.使用MySQL  bind_param()绑定参数</p><h3 id="XSS攻击防范"><a href="#XSS攻击防范" class="headerlink" title="XSS攻击防范"></a>XSS攻击防范</h3><p>1.在php.ini中，session.cookie_httponly = ture 来开启全局的Cookie的HttpOnly属性</p><p>1.htmlspecialchars函数</p><p>2.htmlentities函数</p><p>4.RemoveXss函数</p><p>clean_xss函数</p><h3 id="SSL-或token"><a href="#SSL-或token" class="headerlink" title="SSL 或token"></a>SSL 或token</h3><p>基于token的身份验证<br>1.前端将账号和密码传给后端<br>2.后端将账号和密码加密生成token传给前端<br>3.前端将token存入缓存，每次请求的时候，将token传入url或header里<br>4.后端验证前端传的token 与数据库账号密码生成的token作比较，相等则身份验证OK</p><h3 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h3><p>1.MD5加密</p><p>2.sha1加密</p><p>3.base64加密</p><p>4.openssl_encrypt 加密</p><h3 id="网络7层模型-原理"><a href="#网络7层模型-原理" class="headerlink" title="网络7层模型 原理"></a>网络7层模型 原理</h3><p>应用层<br>表示层<br>会话层<br>传输层<br>网络层<br>数据链路层<br>物理层<br><img src="https://images2015.cnblogs.com/blog/705728/201604/705728-20160424234824085-667046040.png" alt="img"></p><h3 id="OOP思想"><a href="#OOP思想" class="headerlink" title="OOP思想"></a>OOP思想</h3><p>OOP思想中很重要的有五点，类，对象，还有面向对象的三大特征：继承，多态和封装。<br>类是对现实事物的抽象表示，包括事物的属性状态信息和行为信息。<br>对象是抽象事物的具体表示，使其具有自身的特点。<br>继承：让子类拥有父类所有的属性和方法<br>封装：将对象信息状态通过访问权限修饰符隐藏在对象内部，不允许外部程序直接访问<br>多态：接口实现，继承父类方法重写，同一个类中进行重载</p><h3 id="微信对接流程"><a href="#微信对接流程" class="headerlink" title="微信对接流程"></a>微信对接流程</h3><h3 id="nginx性能、安全性方面"><a href="#nginx性能、安全性方面" class="headerlink" title="nginx性能、安全性方面"></a>nginx性能、安全性方面</h3><h3 id="常用的debug方法"><a href="#常用的debug方法" class="headerlink" title="常用的debug方法"></a>常用的debug方法</h3><p>1、 echo，Var_dump，print_r，打断点，查看输出</p><ol start="2"><li>打断点，设置log日志输出</li></ol><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h3 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h3><h4 id="为什么要使用分布式缓存"><a href="#为什么要使用分布式缓存" class="headerlink" title="为什么要使用分布式缓存"></a>为什么要使用分布式缓存</h4><p>1、本地缓存的问题<br>本地缓存速度一开始高于分布式缓存，但是随着其缓存数量的增加，所占内存越来越大，系统运行内存越来越小，最后系统会被拖慢（这一点与第二点联系起来）<br>本地缓存存于本机，其缓存数量与大小受本机内存大小限制<br>本地缓存存于本机，其他机器的访问不到这样的缓存</p><p>高并发环境下，例如典型的淘宝双11秒杀，几分钟内上亿的用户涌入淘宝，这个时候如果访问不加拦截，让大量的读写请求涌向数据库，由于磁盘的处理速度与内存显然不在一个量级，服务器马上就要宕机。从减轻数据库的压力和提高系统响应速度两个角度来考虑，都会在数据库之前加一层缓存，访问压力越大的，在缓存之前就开始CDN拦截图片等访问请求。<br>并且由于最早的单台机器的内存资源以及承载能力有限，如果大量使用本地缓存，也会使相同的数据被不同的节点存储多份，对内存资源造成较大的浪费，因此，才催生出了分布式缓存。<br>假若业务场景需要用到持久化缓存功能、或者支持多种数据结构的缓存功能，那么Redis则是最佳选择。为了让缓存系统能够支持更多的业务场景，选择Redis会更优。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>nginx支持的负载均衡调度算法，实现负载均衡</p><h3 id="日志处理，监控告警"><a href="#日志处理，监控告警" class="headerlink" title="日志处理，监控告警"></a>日志处理，监控告警</h3><p>日志的记录，能帮助debug定位问题所在</p><h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><p>购物车操作就是session的原理操作<br>添加一个物品进去是一个数组，存ID，name, num<br>那么两个物品就是二维数组，操作二维数组即可<br><a href="https://mp.weixin.qq.com/s/VyO1U4R24_8rJ5cHpSOwbw" target="_blank" rel="noopener">购物车原理</a></p><h3 id="秒杀系统"><a href="#秒杀系统" class="headerlink" title="秒杀系统"></a>秒杀系统</h3><p>秒杀主要解决两个问题<br>1.高并发对数据库的压力问题2.商品如何正确减少的问题<br>第一个问题，用户Redis缓存处理抢购，避免直接操作数据库<br>第二个可以将字段设置为unsigned，当库存为0时，就会返回false<br> 二是使用mysql的事务，锁住操作的行</p><h3 id="三五年职业规划"><a href="#三五年职业规划" class="headerlink" title="三五年职业规划"></a>三五年职业规划</h3><p>深耕后端技术，深耕基础知识，成为高级工程师乃至资深工程师级别的人物</p><h3 id="Linux-命令"><a href="#Linux-命令" class="headerlink" title="Linux 命令"></a>Linux 命令</h3><p>linux 如何显示一个文件的某几行(中间几行)<br>【一】从第3000行开始，显示1000行。即显示3000  3999行<br>cat filename | tail -n +3000 | head -n 1000<br>【二】显示1000行到3000行<br>cat filename| head -n 3000 | tail -n +1000<br>或<br>cat filename | tail -n +1000 | head -n 2000</p><p>【三】用sed命令<br> sed -n ‘5,10p’ filename 这样你就可以只查看文件的第5行到第10行。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@: 面试题准备&lt;br&gt;整个简历看上去有点虚，浅薄，技术上需要时间和项目的深刻磨砺&lt;/p&gt;
&lt;h3 id=&quot;MySQL-优化：&quot;&gt;&lt;a href=&quot;#MySQL-优化：&quot; class=&quot;headerlink&quot; title=&quot;MySQL 优化：&quot;&gt;&lt;/a&gt;MySQL 优化：&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>go-命令</title>
    <link href="http://yoursite.com/2019/07/20/go-command/"/>
    <id>http://yoursite.com/2019/07/20/go-command/</id>
    <published>2019-07-20T15:55:35.000Z</published>
    <updated>2019-07-20T15:56:03.505Z</updated>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
        
      
    
    </summary>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>写博客的重要性</title>
    <link href="http://yoursite.com/2019/07/17/the-importance-of-blog/"/>
    <id>http://yoursite.com/2019/07/17/the-importance-of-blog/</id>
    <published>2019-07-17T00:47:49.000Z</published>
    <updated>2019-07-17T02:22:04.005Z</updated>
    
    <content type="html"><![CDATA[<p>在学习过程中，被动接受知识对自己的提高是轻微的。比如看网课学习，在听老师讲解的时候感觉简单易懂，代码逻辑清晰，当自己敲代码的时候，却无从下手，这也是属于眼高手低的范畴。<br>当自己主动学习，主动思考其效率和对个人的提升无疑是高于被动接受的。然而使你提高最大的是主动说出自己的认识，把自己的知识和理解传达给别人，这种方式是对自己的提升无疑是最显著的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习过程中，被动接受知识对自己的提高是轻微的。比如看网课学习，在听老师讲解的时候感觉简单易懂，代码逻辑清晰，当自己敲代码的时候，却无从下手，这也是属于眼高手低的范畴。&lt;br&gt;当自己主动学习，主动思考其效率和对个人的提升无疑是高于被动接受的。然而使你提高最大的是主动说出自己
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo 命令</title>
    <link href="http://yoursite.com/2019/07/16/hexo-help/"/>
    <id>http://yoursite.com/2019/07/16/hexo-help/</id>
    <published>2019-07-16T14:37:20.000Z</published>
    <updated>2019-07-16T15:28:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>clean</strong>      Remove generated files and cache.<br>hexo  clean     移除生成的文件和缓存<br><strong>config</strong>    Get or set configurations.<br>hexo config      获取或设置配置<br><strong>deploy</strong>    Deploy your website.<br>hexo d                      部署您的网站。<br> <strong>generate</strong>   Generate static files.<br>hexo g                     生成生成静态文件。<br><strong>help</strong>     Get help on a command.<br><strong>init</strong>     Create a new Hexo folder.<br><strong>list</strong>      List the information of the site  migrate   Migrate your site from other system to Hexo.<br><strong>new</strong>      Create a new post.<br>hexo new filename        创建新的文章<br><strong>publish</strong>   Moves a draft post from _drafts to _posts folder.<br><strong>render</strong>   Render files with renderer plugins.<br>使用渲染器插件渲染文件。<br><strong>server</strong>    Start the server.<br><strong>version</strong>   Display version information.</p><p>you can check the docs: <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;clean&lt;/strong&gt;      Remove generated files and cache.&lt;br&gt;hexo  clean     移除生成的文件和缓存&lt;br&gt;&lt;strong&gt;config&lt;/strong&gt;    Get or set conf
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hello myblog</title>
    <link href="http://yoursite.com/2019/07/16/hello/"/>
    <id>http://yoursite.com/2019/07/16/hello/</id>
    <published>2019-07-16T14:03:17.000Z</published>
    <updated>2019-07-19T09:22:30.003Z</updated>
    
    <content type="html"><![CDATA[<p>hello myblog</p><p><img src="https://xubodeoss.oss-cn-shanghai.aliyuncs.com/281408194971071086.jpg?Expires=1563531698&OSSAccessKeyId=TMP.hWfykVnQLjdejtar9RR8BW92Z6bSnVdHpnBLhAD8u4RD2fNiubPmkdVBTUjiEi8pFXsysYZPoziwpZxSaP3Fw35hWrHafGKB9QdFCYEcmWPafPRiF81xsPruDBB28s.tmp&Signature=IAgbRZzoMnOHBdUurpfboJKFy1I%3D" alt></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hello myblog&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://xubodeoss.oss-cn-shanghai.aliyuncs.com/281408194971071086.jpg?Expires=1563531698&amp;OSSAccessKeyId=TMP
      
    
    </summary>
    
    
  </entry>
  
</feed>
